:NewDefs


:js
fun print(x: Int) = (y: Int, z: Int) => log([x, y, z])
let p = print(0)
let r = p(z: 1, y: 2)
//│ fun print: (x: Int) -> (y: Int, z: Int) -> ()
//│ let p: (y: Int, z: Int) -> ()
//│ let r: ()
//│ // Prelude
//│ function log(x) {
//│   return console.info(x);
//│ }
//│ let res;
//│ class TypingUnit {}
//│ const typing_unit = new TypingUnit;
//│ // Query 1
//│ globalThis.print = function print(x) {
//│   return ((y, z) => log([
//│     x,
//│     y,
//│     z
//│   ]));
//│ };
//│ // Query 2
//│ globalThis.p = print(0);
//│ // Query 3
//│ globalThis.r = p(2, 1);
//│ // End of generated code
//│ p
//│   = [Function (anonymous)]
//│ r
//│   = undefined
//│ // Output
//│ [ 0, 2, 1 ]

:js
fun print(x) = [x, x]
let p = print
let r = p(1)
//│ fun print: forall 'a. 'a -> ['a, 'a]
//│ let p: forall 'a. 'a -> ['a, 'a]
//│ let r: [1, 1]
//│ // Prelude
//│ class TypingUnit1 {}
//│ const typing_unit1 = new TypingUnit1;
//│ // Query 1
//│ globalThis.print1 = function print1(x) {
//│   return ([
//│     x,
//│     x
//│   ]);
//│ };
//│ // Query 2
//│ globalThis.p1 = print1;
//│ // Query 3
//│ globalThis.r1 = p1(1);
//│ // End of generated code
//│ p
//│   = [Function: print1]
//│ r
//│   = [ 1, 1 ]

:js
fun print(x) = (y) => [x, y]
let p = print(0)
let r = p(1)
//│ fun print: forall 'a 'b. 'a -> 'b -> ['a, 'b]
//│ let p: forall 'c. 'c -> [0, 'c]
//│ let r: [0, 1]
//│ // Prelude
//│ class TypingUnit2 {}
//│ const typing_unit2 = new TypingUnit2;
//│ // Query 1
//│ globalThis.print2 = function print2(x) {
//│   return ((y) => [
//│     x,
//│     y
//│   ]);
//│ };
//│ // Query 2
//│ globalThis.p2 = print2(0);
//│ // Query 3
//│ globalThis.r2 = p2(1);
//│ // End of generated code
//│ p
//│   = [Function (anonymous)]
//│ r
//│   = [ 0, 1 ]


